<IfModule mod_ssl.c>
	
	SSLRandomSeed startup file:/dev/urandom 512
	SSLRandomSeed connect file:/dev/urandom 512
	SSLSessionCache shmcb:log/ssl_scache(512000)
	SSLSessionCacheTimeout 300

	<VirtualHost _default_:443>
		ServerAdmin webmaster@localhost
		# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
		# error, crit, alert, emerg.
		# It is also possible to configure the loglevel for particular
		# modules, e.g.
		#LogLevel info ssl:warn

		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined

		SSLEngine on
		SSLCertificateFile		/etc/ssl/certs/Security_P3G1_SSL.crt
		SSLCertificateKeyFile 	/etc/ssl/private/Security_P3G1_SSL_key.pem

		SSLCACertificatePath 	/etc/ssl/certs/

		SSLVerifyClient 		none
		SSLVerifyDepth 			10
		SSLOptions 				+OptRenegotiate +StdEnvVars +ExportCertData

		#   SSL Protocol Adjustments:
		#   The safe and default but still SSL/TLS standard compliant shutdown
		#   approach is that mod_ssl sends the close notify alert but doesn't wait for
		#   the close notify alert from client. When you need a different shutdown
		#   approach you can use one of the following variables:
		#   o ssl-unclean-shutdown:
		#	 This forces an unclean shutdown when the connection is closed, i.e. no
		#	 SSL close notify alert is send or allowed to received.  This violates
		#	 the SSL/TLS standard but is needed for some brain-dead browsers. Use
		#	 this when you receive I/O errors because of the standard approach where
		#	 mod_ssl sends the close notify alert.
		#   o ssl-accurate-shutdown:
		#	 This forces an accurate shutdown when the connection is closed, i.e. a
		#	 SSL close notify alert is send and mod_ssl waits for the close notify
		#	 alert of the client. This is 100% SSL/TLS standard compliant, but in
		#	 practice often causes hanging connections with brain-dead browsers. Use
		#	 this only for browsers where you know that their SSL implementation
		#	 works correctly.
		#   Notice: Most problems of broken clients are also related to the HTTP
		#   keep-alive facility, so you usually additionally want to disable
		#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
		#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
		#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
		#   "force-response-1.0" for this.
		BrowserMatch "MSIE [2-6]" \
				nokeepalive ssl-unclean-shutdown \
				downgrade-1.0 force-response-1.0
		# MSIE 7 and newer should be able to use keepalive
		BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown		

		SSLProxyEngine on
		RewriteEngine on
		RewriteRule ^(.*) http://127.0.0.1:8888$1 [proxy]

		# initialize the special headers to a blank value to avoid http header forgeries
	   	RequestHeader set SSL_CLIENT_S_DN    ""
	   	RequestHeader set SSL_CLIENT_S_DN_CN ""
	   	RequestHeader set SSL_CLIENT_I_DN    ""

	   	RequestHeader set SSL_CLIENT_I_DN_CN ""
	   	RequestHeader set SSL_SERVER_S_DN_OU ""
	   	RequestHeader set SSL_CLIENT_VERIFY  ""

	   	RequestHeader set SSL_CLIENT_CERT 	 ""
	   	RequestHeader set SSL_CLIENT_I_DN_I  ""
	   	RequestHeader set SSL_CLIENT_CERT_CHAIN_0 ""
	   	RequestHeader set SSL_CLIENT_CERT_CHAIN_1 ""
	   	RequestHeader set SSL_CLIENT_CERT_CHAIN_2 ""
	   	RequestHeader set SSL_CLIENT_CERT_CHAIN_3 ""
	 
	   	<Location />
	     	RequestHeader set SSL_CLIENT_S_DN "%{SSL_CLIENT_S_DN}s"
	     	RequestHeader set SSL_CLIENT_S_DN_CN "%{SSL_CLIENT_S_DN_CN}s"
	     	RequestHeader set SSL_CLIENT_I_DN "%{SSL_CLIENT_I_DN}s"

	     	RequestHeader set SSL_CLIENT_I_DN_CN "%{SSL_CLIENT_I_DN_CN}s"
	     	RequestHeader set SSL_SERVER_S_DN_OU "%{SSL_SERVER_S_DN_OU}s"
	     	RequestHeader set SSL_CLIENT_VERIFY "%{SSL_CLIENT_VERIFY}s"

	     	RequestHeader set SSL_CLIENT_CERT "%{SSL_CLIENT_CERT}s"
	     	RequestHeader set SSL_CLIENT_I_DN_I "%{SSL_CLIENT_I_DN_I}s"
	   		RequestHeader set SSL_CLIENT_CERT_CHAIN_0 "%{SSL_CLIENT_CERT_CHAIN_0}s"
	   		RequestHeader set SSL_CLIENT_CERT_CHAIN_1 "%{SSL_CLIENT_CERT_CHAIN_1}s"
	   		RequestHeader set SSL_CLIENT_CERT_CHAIN_2 "%{SSL_CLIENT_CERT_CHAIN_2}s"
	   		RequestHeader set SSL_CLIENT_CERT_CHAIN_3 "%{SSL_CLIENT_CERT_CHAIN_3}s"
	    </Location>
	    <Location /api>
	    	SSLVerifyClient require
	    </Location>
	    <Location /api/title/all>
	    	SSLVerifyClient none
	    </Location>
	</VirtualHost>
</IfModule>
# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
